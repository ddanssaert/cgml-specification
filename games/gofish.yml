# yaml-language-server: $schema=./cgml.schema.json
cgml_version: "1.3"
meta:
  name: "Go Fish"
  author: "Traditional"
  description: "The goal is to win the most 'books' of four-of-a-kind."
  players:
    min: 2
    max: 5

components:
  component_types:
    deck_types:
      standard_52:
        composition:
          - type: template
            template: standard_suits
            values: [2,3,4,5,6,7,8,9,10,J,Q,K,A]
        rank_hierarchy: [2,3,4,5,6,7,8,9,10,J,Q,K,A]
    zone_types:
      draw_pile:
        ordering: shuffled
        visibility:
          all: count_only
      player_hand:
        ordering: unordered
        visibility:
          owner: all
          others: count_only
      book_area:
        ordering: unordered
        visibility:
          all: all

  decks:
    main_deck:
      type: standard_52

  zones:
    - name: deck
      type: draw_pile
      of_deck: main_deck
    - name: hand
      type: player_hand
      per_player: true
    - name: books
      type: book_area
      per_player: true

  variables:
    - name: book_count
      scope: per_player
      initial_value: 0

setup:
  - action: SHUFFLE
    target:
      path: "$.zones.deck"
  - action: DEAL_ROUND_ROBIN
    from:
      path: "$.zones.deck"
    to:
      path: "$.players[*].zones.hand"
    count: 5
    order: clockwise

flow:
  states:
    Playing:
      phases: [Ask, Resolve, CheckForBooks]
    GameOver:
      phases: []
  initial_state: Playing
  player_order: clockwise

  transitions:
    - id: deck_empty
      from: Playing
      to: GameOver
      condition:
        isEqual:
          - count:
              - path: "$.zones.deck"
          - value: 0

  win_condition:
    description: "The player with the most books when the deck is empty wins."
    evaluator:
      max:
        - list:
            - path: "$.players[0].book_count"
            - path: "$.players[1].book_count"
            # Add more lines as needed for 3+ players (see engine note below)

rules:
  - id: ask_for_card
    trigger: on.phase.Ask
    effect:
      - action: REQUEST_INPUT
        player: current
        prompt: "Choose a player to ask."
        options:
          path: "$.players[opponent]"
        store_as: target_player
      - action: REQUEST_INPUT
        player: current
        prompt: "Choose a rank to ask for."
        options:
          distinct:
            - path: "$.players[current].zones.hand[*].properties.rank"
        store_as: target_rank

  - id: resolve_request_success
    trigger: on.phase.Resolve
    condition:
      isGreaterThan:
        - count:
            - filter:
                - path: "$.players[by_id=ref:target_player].zones.hand"
                - isEqual:
                    - path: "$.card.properties.rank"
                    - ref: target_rank
        - value: 0
    effect:
      - action: MOVE
        from:
          path: "$.players[by_id=ref:target_player].zones.hand"
        to:
          path: "$.players[current].zones.hand"
        filter:
          isEqual:
            - path: "$.card.properties.rank"
            - ref: target_rank
      - action: EXTRA_TURN
        player: current

  - id: resolve_request_fail
    trigger: on.phase.Resolve
    condition:
      isEqual:
        - count:
            - filter:
                - path: "$.players[by_id=ref:target_player].zones.hand"
                - isEqual:
                    - path: "$.card.properties.rank"
                    - ref: target_rank
        - value: 0
    effect:
      - action: MOVE
        from:
          top:
            - path: "$.zones.deck"
        to:
          path: "$.players[current].zones.hand"
        count: 1
        store_as: drawn_card
      - action: EXTRA_TURN
        player: current
        condition:
          isEqual:
            - path: "$.players[current].zones.hand[-1].properties.rank"
            - ref: target_rank

  - id: check_for_books
    trigger: on.phase.CheckForBooks
    effect:
      - action: FOR_EACH
        in:
          distinct:
            - path: "$.players[current].zones.hand[*].properties.rank"
        do:
          - action: IF
            condition:
              isEqual:
                - count:
                    - filter:
                        - path: "$.players[current].zones.hand"
                        - isEqual:
                            - path: "$.card.properties.rank"
                            - ref: item
                - value: 4
            then:
              - action: MOVE
                from:
                  path: "$.players[current].zones.hand"
                to:
                  path: "$.players[current].zones.books"
                filter:
                  isEqual:
                    - path: "$.card.properties.rank"
                    - ref: item
              - action: INCREMENT
                path:
                  path: "$.players[current].book_count"
                by: 1

  - id: replenish_hand
    trigger: on.phase.CheckForBooks
    condition:
      isEqual:
        - count:
            - path: "$.players[current].zones.hand"
        - value: 0
    effect:
      - action: MOVE
        from:
          top:
            - path: "$.zones.deck"
        to:
          path: "$.players[current].zones.hand"
        count:
          min:
            - value: 5
            - count:
                - path: "$.zones.deck"
