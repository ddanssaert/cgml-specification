# yaml-language-server: $schema=./cgml.schema.json
cgml_version: "1.3"

inherit: 'high_card.yml'

meta:
  name: "War"
  description: "The goal is to win all 52 cards."
flow:
  states:
    Playing:
      phases: [Replenish1, Replenish2, FlipCard, Compare]
    War:
      phases: [Replenish1, Replenish2, BeginWar, WarCompare]
    GameOver:
      phases: []
  initial_state: Playing
  player_order: simultaneous

  transitions:
    - from: Playing
      to: GameOver
      condition:
        or:
          - isEqual:
              - sum:
                  - count: [ { path: "$.players[0].zones.player_deck" } ]
                  - count: [ { path: "$.players[0].zones.winnings" } ]
                  - count: [ { path: "$.players[0].zones.play_area" } ]
              - value: 0
          - isEqual:
              - sum:
                  - count: [ { path: "$.players[1].zones.player_deck" } ]
                  - count: [ { path: "$.players[1].zones.winnings" } ]
                  - count: [ { path: "$.players[1].zones.play_area" } ]
              - value: 0

    # If a player cannot possibly lay 4 war cards (deck + winnings < 4), exit War back to Playing and award the pot via on.state.exit.War
    - from: War
      to: Playing
      condition:
        or:
          - isLessThan:
              - add:
                  - count: [ { path: "$.players[0].zones.player_deck" } ]
                  - count: [ { path: "$.players[0].zones.winnings" } ]
              - value: 4
          - isLessThan:
              - add:
                  - count: [ { path: "$.players[1].zones.player_deck" } ]
                  - count: [ { path: "$.players[1].zones.winnings" } ]
              - value: 4

  win_condition:
    evaluator:
      max:
        - list:
            - add:
                - count: [ { path: "$.players[0].zones.player_deck" } ]
                - count: [ { path: "$.players[0].zones.winnings" } ]
            - add:
                - count: [ { path: "$.players[1].zones.player_deck" } ]
                - count: [ { path: "$.players[1].zones.winnings" } ]

rules:
  # Disable parent compare rules (we override tie handling and add War flow)
  - id: compare_p1_wins
    disabled: true
  - id: compare_p2_wins
    disabled: true
  - id: compare_tie_deterministic
    disabled: true

  # Override flip behavior to use simultaneous per-player loop (explicit players anchor)
  - id: flip_cards
    trigger: on.phase.FlipCard
    effect:
      - action: FOR_EACH_PLAYER
        order: simultaneous
        players:
          path: "$.players[*]"
        do:
          - action: MOVE
            from:
              top:
                - path: "$.players[$player].zones.player_deck"
            to:
              path: "$.players[$player].zones.play_area"

  - id: compare_cards_p1_wins
    trigger: on.phase.Compare
    condition:
      and:
        - isGreaterThan:
            - count: [ { path: "$.players[0].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - count: [ { path: "$.players[1].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - rank_value:
                - top:
                    - path: "$.players[0].zones.play_area"
            - rank_value:
                - top:
                    - path: "$.players[1].zones.play_area"
    effect:
      - action: MOVE_ALL
        from:
          path: "$.players[0].zones.play_area"
        to:
          path: "$.players[0].zones.winnings"
      - action: MOVE_ALL
        from:
          path: "$.players[1].zones.play_area"
        to:
          path: "$.players[0].zones.winnings"

  - id: compare_cards_p2_wins
    trigger: on.phase.Compare
    condition:
      and:
        - isGreaterThan:
            - count: [ { path: "$.players[0].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - count: [ { path: "$.players[1].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - rank_value:
                - top:
                    - path: "$.players[1].zones.play_area"
            - rank_value:
                - top:
                    - path: "$.players[0].zones.play_area"
    effect:
      - action: MOVE_ALL
        from:
          path: "$.players[0].zones.play_area"
        to:
          path: "$.players[1].zones.winnings"
      - action: MOVE_ALL
        from:
          path: "$.players[1].zones.play_area"
        to:
          path: "$.players[1].zones.winnings"

  - id: compare_cards_tie
    trigger: on.phase.Compare
    condition:
      and:
        - isGreaterThan:
            - count: [ { path: "$.players[0].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - count: [ { path: "$.players[1].zones.play_area" } ]
            - value: 0
        - isEqual:
            - rank_value:
                - top:
                    - path: "$.players[0].zones.play_area"
            - rank_value:
                - top:
                    - path: "$.players[1].zones.play_area"
    effect:
      # Enter War loop (Replenish -> BeginWar -> WarCompare)
      - action: SET_STATE
        state: War

  # Replenish before wars or normal play whenever deck < 4 and winnings > 0
  - id: replenish_anytime_p1
    trigger: on.phase.Replenish1
    condition:
      and:
        - isLessThan:
            - count: [ { path: "$.players[0].zones.player_deck" } ]
            - value: 4
        - isGreaterThan:
            - count: [ { path: "$.players[0].zones.winnings" } ]
            - value: 0
    effect:
      - action: MOVE_ALL
        from:
          path: "$.players[0].zones.winnings"
        to:
          path: "$.players[0].zones.player_deck"
      - action: SHUFFLE
        target:
          path: "$.players[0].zones.player_deck"

  - id: replenish_anytime_p2
    trigger: on.phase.Replenish2
    condition:
      and:
        - isLessThan:
            - count: [ { path: "$.players[1].zones.player_deck" } ]
            - value: 4
        - isGreaterThan:
            - count: [ { path: "$.players[1].zones.winnings" } ]
            - value: 0
    effect:
      - action: MOVE_ALL
        from:
          path: "$.players[1].zones.winnings"
        to:
          path: "$.players[1].zones.player_deck"
      - action: SHUFFLE
        target:
          path: "$.players[1].zones.player_deck"

  # Lay down war cards only when both players have at least 4 cards in deck (after replenish)
  - id: begin_war
    trigger: on.phase.BeginWar
    condition:
      and:
        - isGreaterThan:
            - count: [ { path: "$.players[0].zones.player_deck" } ]
            - value: 3
        - isGreaterThan:
            - count: [ { path: "$.players[1].zones.player_deck" } ]
            - value: 3
    effect:
      - action: MOVE
        from:
          path: "$.players[0].zones.player_deck"
        to:
          path: "$.players[0].zones.play_area"
        count: 3
      - action: MOVE
        from:
          path: "$.players[1].zones.player_deck"
        to:
          path: "$.players[1].zones.play_area"
        count: 3
      - action: MOVE
        from:
          path: "$.players[0].zones.player_deck"
        to:
          path: "$.players[0].zones.play_area"
        count: 1
      - action: MOVE
        from:
          path: "$.players[1].zones.player_deck"
        to:
          path: "$.players[1].zones.play_area"
        count: 1

  - id: war_compare_p1_win
    trigger: on.phase.WarCompare
    condition:
      and:
        - isGreaterThan:
            - count: [ { path: "$.players[0].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - count: [ { path: "$.players[1].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - rank_value:
                - top:
                    - path: "$.players[0].zones.play_area"
            - rank_value:
                - top:
                    - path: "$.players[1].zones.play_area"
    effect:
      - action: MOVE_ALL
        from:
          path: "$.players[0].zones.play_area"
        to:
          path: "$.players[0].zones.winnings"
      - action: MOVE_ALL
        from:
          path: "$.players[1].zones.play_area"
        to:
          path: "$.players[0].zones.winnings"
      - action: SET_STATE
        state: Playing

  - id: war_compare_p2_win
    trigger: on.phase.WarCompare
    condition:
      and:
        - isGreaterThan:
            - count: [ { path: "$.players[0].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - count: [ { path: "$.players[1].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - rank_value:
                - top:
                    - path: "$.players[1].zones.play_area"
            - rank_value:
                - top:
                    - path: "$.players[0].zones.play_area"
    effect:
      - action: MOVE_ALL
        from:
          path: "$.players[0].zones.play_area"
        to:
          path: "$.players[1].zones.winnings"
      - action: MOVE_ALL
        from:
          path: "$.players[1].zones.play_area"
        to:
          path: "$.players[1].zones.winnings"
      - action: SET_STATE
        state: Playing

  - id: war_compare_tie
    trigger: on.phase.WarCompare
    condition:
      and:
        - isGreaterThan:
            - count: [ { path: "$.players[0].zones.play_area" } ]
            - value: 0
        - isGreaterThan:
            - count: [ { path: "$.players[1].zones.play_area" } ]
            - value: 0
        - isEqual:
            - rank_value:
                - top:
                    - path: "$.players[0].zones.play_area"
            - rank_value:
                - top:
                    - path: "$.players[1].zones.play_area"
    effect:
      - action: SET_STATE
        state: War     # Repeats the war sequence

  # Cleanup/award the pot when exiting War due to shortage (cannot muster 4)
  - id: war_cleanup_award_pot_on_shortage
    trigger: on.state.exit.War
    condition:
      or:
        - isLessThan:
            - add:
                - count: [ { path: "$.players[0].zones.player_deck" } ]
                - count: [ { path: "$.players[0].zones.winnings" } ]
            - value: 4
        - isLessThan:
            - add:
                - count: [ { path: "$.players[1].zones.player_deck" } ]
                - count: [ { path: "$.players[1].zones.winnings" } ]
            - value: 4
    effect:
      # Case 1: both cannot continue -> award to leader (tie -> player 0)
      - action: IF
        condition:
          and:
            - isLessThan:
                - add:
                    - count: [ { path: "$.players[0].zones.player_deck" } ]
                    - count: [ { path: "$.players[0].zones.winnings" } ]
                - value: 4
            - isLessThan:
                - add:
                    - count: [ { path: "$.players[1].zones.player_deck" } ]
                    - count: [ { path: "$.players[1].zones.winnings" } ]
                - value: 4
        then:
          - action: IF
            condition:
              isGreaterThan:
                - add:
                    - count: [ { path: "$.players[0].zones.player_deck" } ]
                    - count: [ { path: "$.players[0].zones.winnings" } ]
                - add:
                    - count: [ { path: "$.players[1].zones.player_deck" } ]
                    - count: [ { path: "$.players[1].zones.winnings" } ]
            then:
              - action: MOVE_ALL
                from:
                  path: "$.players[0].zones.play_area"
                to:
                  path: "$.players[0].zones.winnings"
              - action: MOVE_ALL
                from:
                  path: "$.players[1].zones.play_area"
                to:
                  path: "$.players[0].zones.winnings"
            else:
              - action: IF
                condition:
                  isGreaterThan:
                    - add:
                        - count: [ { path: "$.players[1].zones.player_deck" } ]
                        - count: [ { path: "$.players[1].zones.winnings" } ]
                    - add:
                        - count: [ { path: "$.players[0].zones.player_deck" } ]
                        - count: [ { path: "$.players[0].zones.winnings" } ]
                then:
                  - action: MOVE_ALL
                    from:
                      path: "$.players[0].zones.play_area"
                    to:
                      path: "$.players[1].zones.winnings"
                  - action: MOVE_ALL
                    from:
                      path: "$.players[1].zones.play_area"
                    to:
                      path: "$.players[1].zones.winnings"
                else:
                  # exact tie -> deterministic seat-order winner (player 0)
                  - action: MOVE_ALL
                    from:
                      path: "$.players[0].zones.play_area"
                    to:
                      path: "$.players[0].zones.winnings"
                  - action: MOVE_ALL
                    from:
                      path: "$.players[1].zones.play_area"
                    to:
                      path: "$.players[0].zones.winnings"
        else:
          # Case 2: exactly one cannot continue -> opponent gets the pot
          - action: IF
            condition:
              isLessThan:
                - add:
                    - count: [ { path: "$.players[0].zones.player_deck" } ]
                    - count: [ { path: "$.players[0].zones.winnings" } ]
                - value: 4
            then:
              # Player 0 cannot -> Player 1 gets pot
              - action: MOVE_ALL
                from:
                  path: "$.players[0].zones.play_area"
                to:
                  path: "$.players[1].zones.winnings"
              - action: MOVE_ALL
                from:
                  path: "$.players[1].zones.play_area"
                to:
                  path: "$.players[1].zones.winnings"
            else:
              # Player 1 cannot -> Player 0 gets pot
              - action: MOVE_ALL
                from:
                  path: "$.players[0].zones.play_area"
                to:
                  path: "$.players[0].zones.winnings"
              - action: MOVE_ALL
                from:
                  path: "$.players[1].zones.play_area"
                to:
                  path: "$.players[0].zones.winnings"